"use strict";(this.webpackChunkAITextDetector=this.webpackChunkAITextDetector||[]).push([[72],{72:(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.AIDetector = void 0;\nclass AIDetector {\n  constructor() {\n    // Initialize any needed properties\n  }\n  analyzeText(text) {\n    // Get detailed analysis results\n    const analysisResults = this.analyzeTextDetailed(text);\n\n    // Return just the AI score\n    return analysisResults.aiScore;\n  }\n  analyzeTextDetailed(text) {\n    if (!text.trim()) {\n      return {\n        aiScore: 0,\n        confidence: 1,\n        metrics: {},\n        wordCount: 0,\n        sentenceCount: 0,\n        avgSentenceLength: 0,\n        uniqueWords: 0,\n        repetitionScore: 0,\n        sentenceLengthVariance: 0,\n        transitionPhrases: 0,\n        factors: {\n          baseline: 0,\n          sentenceLength: 0,\n          vocabulary: 0,\n          variance: 0,\n          transitions: 0,\n          density: 0\n        }\n      };\n    }\n\n    // Split text into sentences and words\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    const words = text.split(/\\s+/).filter(w => w.length > 0);\n\n    // Calculate basic text statistics\n    const wordCount = words.length;\n    const sentenceCount = sentences.length;\n    const avgSentenceLength = sentences.reduce((sum, s) => sum + s.split(" ").length, 0) / sentenceCount || 0;\n\n    // Calculate vocabulary diversity\n    const uniqueWords = new Set(words.map(w => w.toLowerCase())).size;\n    const repetitionScore = (wordCount - uniqueWords) / wordCount;\n\n    // Calculate sentence length variance\n    const sentenceLengthVariance = sentences.map(s => s.split(" ").length).reduce((sum, len) => sum + Math.pow(len - avgSentenceLength, 2), 0) / sentenceCount || 0;\n\n    // Count transition phrases\n    const transitionPhrases = ["for example", "in conclusion", "finally", "first", "second", "another", "například", "závěrem", "zum Beispiel", "abschließend", "par exemple", "en conclusion", "por ejemplo", "en conclusión", "наприклад", "в заключение"].reduce((count, phrase) => count + (text.toLowerCase().split(phrase).length - 1), 0);\n\n    // Calculate AI score based on various factors\n    let aiScore = 20; // Baseline score\n\n    // Factor 1: Sentence length consistency\n    if (avgSentenceLength > 8 && avgSentenceLength < 16) aiScore += 25;\n\n    // Factor 2: Vocabulary diversity\n    if (repetitionScore < 0.3) aiScore += 20;\n\n    // Factor 3: Sentence length variance\n    if (sentenceLengthVariance < 15) aiScore += 20;\n\n    // Factor 4: Use of transition phrases\n    if (transitionPhrases > 1) aiScore += 20;\n\n    // Factor 5: Text density\n    if (wordCount > 100 && sentenceCount < 15) aiScore += 15;\n\n    // Ensure score doesn\'t exceed 100\n    const finalScore = Math.min(Math.round(aiScore), 100);\n\n    // Calculate confidence based on the number of factors that contributed to the score\n    const factors = {\n      baseline: 20,\n      sentenceLength: avgSentenceLength > 8 && avgSentenceLength < 16 ? 25 : 0,\n      vocabulary: repetitionScore < 0.3 ? 20 : 0,\n      variance: sentenceLengthVariance < 15 ? 20 : 0,\n      transitions: transitionPhrases > 1 ? 20 : 0,\n      density: wordCount > 100 && sentenceCount < 15 ? 15 : 0\n    };\n\n    // Calculate confidence based on how many factors contributed to the score\n    const contributingFactors = Object.values(factors).filter(v => v > 0).length;\n    const confidence = contributingFactors / Object.keys(factors).length;\n\n    // Calculate metrics for test requirements\n    const metrics = {\n      wordCount,\n      sentenceCount,\n      avgSentenceLength,\n      uniqueWords,\n      repetitionScore,\n      sentenceLengthVariance,\n      transitionPhrases\n    };\n\n    // Return comprehensive analysis results\n    return {\n      aiScore: finalScore,\n      confidence,\n      metrics,\n      wordCount,\n      sentenceCount,\n      avgSentenceLength,\n      uniqueWords,\n      repetitionScore,\n      sentenceLengthVariance,\n      transitionPhrases,\n      factors\n    };\n  }\n  analyzeSentiment(text) {\n    const positiveWords = [\'good\', \'great\', \'excellent\', \'happy\', \'wonderful\'];\n    const negativeWords = [\'bad\', \'terrible\', \'horrible\', \'sad\', \'awful\'];\n    const words = text.toLowerCase().split(/\\s+/);\n    const positiveMatches = words.filter(w => positiveWords.includes(w));\n    const negativeMatches = words.filter(w => negativeWords.includes(w));\n    const score = (positiveMatches.length - negativeMatches.length) / words.length;\n    return {\n      score,\n      sentiment: score > 0 ? \'positive\' : score < 0 ? \'negative\' : \'neutral\',\n      confidence: Math.abs(score),\n      positiveWords: positiveMatches,\n      negativeWords: negativeMatches\n    };\n  }\n  calculateAdvancedReadability(text) {\n    const words = text.split(/\\s+/).filter(w => w.length > 0);\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    const wordCount = words.length;\n    const sentenceCount = sentences.length;\n\n    // Estimate syllable count\n    const syllables = words.reduce((sum, w) => sum + (w.match(/[aeiouy]+/gi)?.length || 1), 0);\n\n    // Calculate various readability scores\n    const fleschKincaid = 206.835 - 1.015 * (wordCount / sentenceCount) - 84.6 * (syllables / wordCount);\n    const gunningFog = 0.4 * (wordCount / sentenceCount + 100 * (syllables / wordCount));\n    const smog = 1.043 * Math.sqrt(syllables * (30 / sentenceCount)) + 3.1291;\n    const automatedReadability = 4.71 * (syllables / wordCount) + 0.5 * (wordCount / sentenceCount) - 21.43;\n    return {\n      fleschKincaid: Math.round(fleschKincaid * 10) / 10,\n      gunningFog: Math.round(gunningFog * 10) / 10,\n      smog: Math.round(smog * 10) / 10,\n      automatedReadability: Math.round(automatedReadability * 10) / 10\n    };\n  }\n  compareTexts(text1, text2) {\n    const analysis1 = this.analyzeTextDetailed(text1);\n    const analysis2 = this.analyzeTextDetailed(text2);\n    return {\n      text1Score: analysis1.aiScore,\n      text2Score: analysis2.aiScore,\n      text1Analysis: analysis1,\n      text2Analysis: analysis2\n    };\n  }\n  findRepeatingWords(text) {\n    let minCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    const words = text.split(/\\s+/).filter(w => w.length > 0);\n    const wordFreq = {};\n\n    // Count word frequencies\n    words.forEach(w => {\n      const word = w.toLowerCase();\n      wordFreq[word] = (wordFreq[word] || 0) + 1;\n    });\n\n    // Filter to only repeating words\n    const repeats = Object.entries(wordFreq).filter(_ref => {\n      let [_, count] = _ref;\n      return count >= minCount;\n    }).sort((a, b) => b[1] - a[1]); // Sort by frequency\n\n    return repeats;\n  }\n  highlightAIText(text) {\n    // Split text into sentences\n    const sentenceRegex = /([^.!?]+[.!?]+)/g;\n    const sentences = text.match(sentenceRegex) || [];\n\n    // Analyze each sentence\n    const analyzedSentences = sentences.map(sentence => {\n      const analysis = this.analyzeTextDetailed(sentence);\n      return {\n        text: sentence,\n        score: analysis.aiScore,\n        isLikelyAI: analysis.aiScore > 60\n      };\n    });\n\n    // Create HTML with highlighted sections\n    const highlightedText = analyzedSentences.map(sentence => {\n      if (sentence.isLikelyAI) {\n        return `<span class="ai-highlight" data-score="${sentence.score}">${sentence.text}</span>`;\n      }\n      return sentence.text;\n    }).join(\'\');\n    return {\n      highlightedText,\n      sentences: analyzedSentences\n    };\n  }\n}\n\n// Export for browser environments\nexports.AIDetector = AIDetector;\nif (typeof window !== \'undefined\') {\n  window.AIDetector = AIDetector;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///72\n')}}]);