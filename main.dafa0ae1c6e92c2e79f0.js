"use strict";!function(Q,U){"object"==typeof exports&&"object"==typeof module?module.exports=U():"function"==typeof define&&define.amd?define("AITextDetector",[],U):"object"==typeof exports?exports.AITextDetector=U():Q.AITextDetector=U()}(this,(()=>(this.webpackChunkAITextDetector=this.webpackChunkAITextDetector||[]).push([[792],{164:(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n// debug.js - Debugging functionality for AI Text Detector\n// This module provides debugging tools for development and troubleshooting\n\n/**\n * Debug configuration object\n */\nconst debugConfig = {\n  enabled: false,\n  logLevel: 'info',\n  // 'error', 'warn', 'info', 'debug', 'verbose'\n  showTimestamps: true,\n  traceAIDetection: false,\n  traceDOMEvents: false,\n  performanceMonitoring: false,\n  visualizeAlgorithm: false,\n  moduleLoadingDebug: true,\n  networkDebug: true\n};\n\n/**\n * Debug logger with different log levels\n */\nconst debugLogger = {\n  error: function (message, data, stack) {\n    if (!debugConfig.enabled) return;\n    const prefix = debugConfig.showTimestamps ? `[${new Date().toISOString()}] [ERROR] ` : '[ERROR] ';\n    console.error(prefix + message, data !== undefined ? data : '', stack || new Error().stack);\n    this.saveToLocalStorage('error', message, data, stack);\n  },\n  warn: function (message, data) {\n    if (!debugConfig.enabled || !['warn', 'info', 'debug', 'verbose'].includes(debugConfig.logLevel)) return;\n    const prefix = debugConfig.showTimestamps ? `[${new Date().toISOString()}] [WARN] ` : '[WARN] ';\n    console.warn(prefix + message, data !== undefined ? data : '');\n    this.saveToLocalStorage('warn', message, data);\n  },\n  info: function (message, data) {\n    if (!debugConfig.enabled || !['info', 'debug', 'verbose'].includes(debugConfig.logLevel)) return;\n    const prefix = debugConfig.showTimestamps ? `[${new Date().toISOString()}] [INFO] ` : '[INFO] ';\n    console.info(prefix + message, data !== undefined ? data : '');\n    this.saveToLocalStorage('info', message, data);\n  },\n  debug: function (message, data) {\n    if (!debugConfig.enabled || !['debug', 'verbose'].includes(debugConfig.logLevel)) return;\n    const prefix = debugConfig.showTimestamps ? `[${new Date().toISOString()}] [DEBUG] ` : '[DEBUG] ';\n    console.debug(prefix + message, data !== undefined ? data : '');\n    this.saveToLocalStorage('debug', message, data);\n  },\n  verbose: function (message, data) {\n    if (!debugConfig.enabled || debugConfig.logLevel !== 'verbose') return;\n    const prefix = debugConfig.showTimestamps ? `[${new Date().toISOString()}] [VERBOSE] ` : '[VERBOSE] ';\n    console.debug(prefix + message, data !== undefined ? data : '');\n    this.saveToLocalStorage('verbose', message, data);\n  },\n  saveToLocalStorage: function (level, message, data, stack) {\n    try {\n      const logs = JSON.parse(localStorage.getItem('aiDetectorLogs') || '[]');\n      logs.push({\n        timestamp: new Date().toISOString(),\n        level,\n        message,\n        data: data ? JSON.stringify(data) : undefined,\n        stack\n      });\n\n      // Keep only last 100 logs\n      if (logs.length > 100) {\n        logs.shift();\n      }\n      localStorage.setItem('aiDetectorLogs', JSON.stringify(logs));\n    } catch (error) {\n      console.error('Error saving log to localStorage:', error);\n    }\n  }\n};\n\n/**\n * Module loading tracker\n */\nconst moduleTracker = {\n  loadedModules: new Set(),\n  moduleErrors: new Map(),\n  trackModuleLoad: function (moduleName) {\n    this.loadedModules.add(moduleName);\n    debugLogger.info(`Module loaded: ${moduleName}`);\n  },\n  trackModuleError: function (moduleName, error) {\n    this.moduleErrors.set(moduleName, error);\n    debugLogger.error(`Module load error: ${moduleName}`, error);\n  },\n  getModuleStatus: function () {\n    return {\n      loaded: Array.from(this.loadedModules),\n      errors: Object.fromEntries(this.moduleErrors)\n    };\n  }\n};\n\n/**\n * Network request tracker\n */\nconst networkTracker = {\n  requests: new Map(),\n  trackRequest: function (url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const requestId = Math.random().toString(36).substr(2, 9);\n    this.requests.set(requestId, {\n      url,\n      options,\n      startTime: Date.now(),\n      status: 'pending'\n    });\n    return requestId;\n  },\n  trackResponse: function (requestId, response) {\n    const request = this.requests.get(requestId);\n    if (request) {\n      request.endTime = Date.now();\n      request.duration = request.endTime - request.startTime;\n      request.status = response.ok ? 'success' : 'error';\n      request.statusCode = response.status;\n      debugLogger.debug(`Request completed: ${request.url}`, request);\n    }\n  },\n  trackError: function (requestId, error) {\n    const request = this.requests.get(requestId);\n    if (request) {\n      request.endTime = Date.now();\n      request.duration = request.endTime - request.startTime;\n      request.status = 'error';\n      request.error = error;\n      debugLogger.error(`Request failed: ${request.url}`, error);\n    }\n  }\n};\n\n/**\n * Performance monitoring\n */\nconst performanceMonitor = {\n  metrics: new Map(),\n  startMeasure: function (name) {\n    if (!debugConfig.performanceMonitoring) return;\n    performance.mark(`${name}-start`);\n  },\n  endMeasure: function (name) {\n    if (!debugConfig.performanceMonitoring) return;\n    performance.mark(`${name}-end`);\n    performance.measure(name, `${name}-start`, `${name}-end`);\n    const entries = performance.getEntriesByName(name);\n    if (entries.length > 0) {\n      this.metrics.set(name, entries[0].duration);\n      debugLogger.debug(`Performance measurement - ${name}:`, `${entries[0].duration.toFixed(2)}ms`);\n    }\n  },\n  getMetrics: function () {\n    return Object.fromEntries(this.metrics);\n  }\n};\n\n/**\n * Error boundary for catching and handling runtime errors\n */\nconst errorBoundary = {\n  errors: [],\n  handleError: function (error, componentStack) {\n    this.errors.push({\n      timestamp: new Date().toISOString(),\n      error: error.message,\n      stack: error.stack,\n      componentStack\n    });\n    debugLogger.error('Runtime error caught:', error, componentStack);\n\n    // Try to recover UI\n    this.attemptRecovery();\n  },\n  attemptRecovery: function () {\n    try {\n      // Reset UI state\n      const app = document.querySelector('.app-content');\n      if (app) {\n        app.classList.remove('loaded');\n        setTimeout(() => {\n          app.classList.add('loaded');\n        }, 100);\n      }\n\n      // Re-initialize if needed\n      if (window.AITextDetector && window.AITextDetector.initApp) {\n        window.AITextDetector.initApp();\n      }\n    } catch (error) {\n      debugLogger.error('Recovery attempt failed:', error);\n    }\n  }\n};\n\n/**\n * Debug UI controls\n */\nconst debugUI = {\n  init: function () {\n    if (this.isDebugMode()) {\n      this.createDebugPanel();\n      debugConfig.enabled = true;\n      debugLogger.info('Debug mode activated');\n      this.setupErrorHandling();\n      this.setupNetworkTracking();\n    }\n  },\n  isDebugMode: function () {\n    return window.location.hash.includes('debug') || localStorage.getItem('aiDetectorDebug') === 'true' || \"production\" === 'development';\n  },\n  setupErrorHandling: function () {\n    window.onerror = (message, source, lineno, colno, error) => {\n      debugLogger.error('Global error:', {\n        message,\n        source,\n        lineno,\n        colno\n      }, error?.stack);\n      return false;\n    };\n    window.onunhandledrejection = event => {\n      debugLogger.error('Unhandled promise rejection:', event.reason);\n      return false;\n    };\n  },\n  setupNetworkTracking: function () {\n    if (debugConfig.networkDebug) {\n      const originalFetch = window.fetch;\n      window.fetch = async function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        const requestId = networkTracker.trackRequest(args[0]);\n        try {\n          const response = await originalFetch.apply(this, args);\n          networkTracker.trackResponse(requestId, response);\n          return response;\n        } catch (error) {\n          networkTracker.trackError(requestId, error);\n          throw error;\n        }\n      };\n    }\n  },\n  createDebugPanel: function () {\n    const panel = document.createElement('div');\n    panel.id = 'debug-panel';\n    panel.style.cssText = `\n      position: fixed;\n      bottom: 0;\n      right: 0;\n      width: 300px;\n      background: rgba(0, 0, 0, 0.8);\n      color: #00ff00;\n      font-family: monospace;\n      font-size: 12px;\n      padding: 10px;\n      z-index: 9999;\n      max-height: 400px;\n      overflow-y: auto;\n      border-top-left-radius: 5px;\n    `;\n    const header = document.createElement('div');\n    header.innerHTML = '<h3 style=\"margin: 0 0 10px 0; color: #fff;\">AI Detector Debug Panel</h3>';\n    panel.appendChild(header);\n\n    // Add controls and info sections\n    this.addDebugControls(panel);\n    document.body.appendChild(panel);\n  },\n  addDebugControls: function (panel) {\n    // Log level selector\n    const logLevelContainer = this.createLogLevelSelector();\n    panel.appendChild(logLevelContainer);\n\n    // Debug options\n    const optionsContainer = this.createDebugOptions();\n    panel.appendChild(optionsContainer);\n\n    // Module status\n    const moduleStatus = this.createModuleStatus();\n    panel.appendChild(moduleStatus);\n\n    // Performance metrics\n    const perfMetrics = this.createPerformanceMetrics();\n    panel.appendChild(perfMetrics);\n\n    // Error log\n    const errorLog = this.createErrorLog();\n    panel.appendChild(errorLog);\n  },\n  createLogLevelSelector: function () {\n    const container = document.createElement('div');\n    container.style.margin = '5px 0';\n    container.innerHTML = `\n      <label for=\"debug-log-level\">Log Level: </label>\n      <select id=\"debug-log-level\">\n        <option value=\"error\">Error</option>\n        <option value=\"warn\">Warning</option>\n        <option value=\"info\" selected>Info</option>\n        <option value=\"debug\">Debug</option>\n        <option value=\"verbose\">Verbose</option>\n      </select>\n    `;\n    container.querySelector('select').addEventListener('change', e => {\n      debugConfig.logLevel = e.target.value;\n    });\n    return container;\n  },\n  createDebugOptions: function () {\n    const container = document.createElement('div');\n    container.style.margin = '5px 0';\n    const options = [{\n      id: 'showTimestamps',\n      label: 'Show Timestamps'\n    }, {\n      id: 'traceAIDetection',\n      label: 'Trace AI Detection'\n    }, {\n      id: 'traceDOMEvents',\n      label: 'Trace DOM Events'\n    }, {\n      id: 'performanceMonitoring',\n      label: 'Performance Monitoring'\n    }, {\n      id: 'moduleLoadingDebug',\n      label: 'Module Loading Debug'\n    }, {\n      id: 'networkDebug',\n      label: 'Network Debug'\n    }];\n    options.forEach(option => {\n      const label = document.createElement('label');\n      label.style.display = 'block';\n      label.style.margin = '2px 0';\n      const checkbox = document.createElement('input');\n      checkbox.type = 'checkbox';\n      checkbox.id = option.id;\n      checkbox.checked = debugConfig[option.id];\n      checkbox.addEventListener('change', e => {\n        debugConfig[option.id] = e.target.checked;\n      });\n      label.appendChild(checkbox);\n      label.appendChild(document.createTextNode(` ${option.label}`));\n      container.appendChild(label);\n    });\n    return container;\n  },\n  createModuleStatus: function () {\n    const container = document.createElement('div');\n    container.style.margin = '5px 0';\n    container.innerHTML = '<h4>Module Status</h4>';\n    const status = moduleTracker.getModuleStatus();\n    const statusTable = document.createElement('table');\n    statusTable.style.width = '100%';\n    const headerRow = document.createElement('tr');\n    const moduleHeader = document.createElement('th');\n    moduleHeader.style.width = '50%';\n    moduleHeader.style.textAlign = 'left';\n    moduleHeader.innerHTML = 'Module';\n    headerRow.appendChild(moduleHeader);\n    const statusHeader = document.createElement('th');\n    statusHeader.style.width = '50%';\n    statusHeader.style.textAlign = 'left';\n    statusHeader.innerHTML = 'Status';\n    headerRow.appendChild(statusHeader);\n    statusTable.appendChild(headerRow);\n    status.loaded.forEach(module => {\n      const row = document.createElement('tr');\n      const moduleCell = document.createElement('td');\n      moduleCell.style.padding = '5px';\n      moduleCell.innerHTML = module;\n      row.appendChild(moduleCell);\n      const statusCell = document.createElement('td');\n      statusCell.style.padding = '5px';\n      statusCell.style.textAlign = 'left';\n      statusCell.innerHTML = 'Loaded';\n      row.appendChild(statusCell);\n      statusTable.appendChild(row);\n    });\n    status.errors.forEach((error, module) => {\n      const row = document.createElement('tr');\n      const moduleCell = document.createElement('td');\n      moduleCell.style.padding = '5px';\n      moduleCell.innerHTML = module;\n      row.appendChild(moduleCell);\n      const statusCell = document.createElement('td');\n      statusCell.style.padding = '5px';\n      statusCell.style.textAlign = 'left';\n      statusCell.innerHTML = error instanceof Error ? error.message : error;\n      row.appendChild(statusCell);\n      statusTable.appendChild(row);\n    });\n    container.appendChild(statusTable);\n    return container;\n  },\n  createPerformanceMetrics: function () {\n    const container = document.createElement('div');\n    container.style.margin = '5px 0';\n    container.innerHTML = '<h4>Performance Metrics</h4>';\n    const metrics = performanceMonitor.getMetrics();\n    const metricsTable = document.createElement('table');\n    metricsTable.style.width = '100%';\n    const headerRow = document.createElement('tr');\n    const metricHeader = document.createElement('th');\n    metricHeader.style.width = '50%';\n    metricHeader.style.textAlign = 'left';\n    metricHeader.innerHTML = 'Metric';\n    headerRow.appendChild(metricHeader);\n    const valueHeader = document.createElement('th');\n    valueHeader.style.width = '50%';\n    valueHeader.style.textAlign = 'left';\n    valueHeader.innerHTML = 'Value';\n    headerRow.appendChild(valueHeader);\n    metricsTable.appendChild(headerRow);\n    Object.entries(metrics).forEach(_ref => {\n      let [metric, value] = _ref;\n      const row = document.createElement('tr');\n      const metricCell = document.createElement('td');\n      metricCell.style.padding = '5px';\n      metricCell.innerHTML = metric;\n      row.appendChild(metricCell);\n      const valueCell = document.createElement('td');\n      valueCell.style.padding = '5px';\n      valueCell.style.textAlign = 'left';\n      valueCell.innerHTML = value.toFixed(2) + 'ms';\n      row.appendChild(valueCell);\n      metricsTable.appendChild(row);\n    });\n    container.appendChild(metricsTable);\n    return container;\n  },\n  createErrorLog: function () {\n    const container = document.createElement('div');\n    container.style.margin = '5px 0';\n    container.innerHTML = '<h4>Error Log</h4>';\n    const errorLog = document.createElement('textarea');\n    errorLog.style.width = '100%';\n    errorLog.style.height = '100px';\n    errorLog.style.resize = 'none';\n    errorLog.value = this.getErrorLog();\n    errorLog.readOnly = true;\n    container.appendChild(errorLog);\n    return container;\n  },\n  getErrorLog: function () {\n    const logs = JSON.parse(localStorage.getItem('aiDetectorLogs') || '[]');\n    return logs.map(log => {\n      return `${log.timestamp} - ${log.level.toUpperCase()}: ${log.message}\n${log.data ? `Data: ${log.data}` : ''}\n${log.stack ? `Stack: ${log.stack}` : ''}`;\n    }).join('\\n\\n');\n  }\n};\n\n// Export debug functionality\nconst Debug = {\n  config: debugConfig,\n  logger: debugLogger,\n  moduleTracker,\n  networkTracker,\n  performanceMonitor,\n  errorBoundary,\n  ui: debugUI\n};\n\n// Initialize debug mode if needed\nif (typeof window !== 'undefined') {\n  window.AIDetectorDebug = Debug;\n}\nvar _default = exports[\"default\"] = Debug;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///164\n")},442:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0FJVGV4dERldGVjdG9yLy4vZGFyay10aGVtZS5jc3M/NjljMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///442\n")},485:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg1LmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0FJVGV4dERldGVjdG9yLy4vbWFpbi5jc3M/YTQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///485\n")},518:module=>{eval("\n\n// utils.js - Helper functions for AI Text Detector\n\n/**\n * Collection of utility functions for the AI Text Detector\n */\nconst utils = {\n  /**\n   * Safely get element by ID with error handling\n   * @param {string} id - Element ID\n   * @returns {HTMLElement|null} - The element or null if not found\n   */\n  getElement: function (id) {\n    const element = document.getElementById(id);\n    if (!element && window.AIDetectorDebug && window.AIDetectorDebug.config.enabled) {\n      window.AIDetectorDebug.logger.warn(`Element with ID \"${id}\" not found`);\n    }\n    return element;\n  },\n  /**\n   * Create a DOM element with attributes and content\n   * @param {string} tag - HTML tag name\n   * @param {Object} attributes - Element attributes\n   * @param {string|HTMLElement|Array} content - Element content\n   * @returns {HTMLElement} - The created element\n   */\n  createElement: function (tag) {\n    let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const element = document.createElement(tag);\n\n    // Set attributes\n    Object.entries(attributes).forEach(_ref => {\n      let [key, value] = _ref;\n      if (key === 'class' || key === 'className') {\n        element.className = value;\n      } else if (key === 'style' && typeof value === 'object') {\n        Object.entries(value).forEach(_ref2 => {\n          let [prop, val] = _ref2;\n          element.style[prop] = val;\n        });\n      } else {\n        element.setAttribute(key, value);\n      }\n    });\n\n    // Set content\n    if (content !== null) {\n      if (typeof content === 'string') {\n        element.innerHTML = content;\n      } else if (content instanceof HTMLElement) {\n        element.appendChild(content);\n      } else if (Array.isArray(content)) {\n        content.forEach(item => {\n          if (typeof item === 'string') {\n            element.innerHTML += item;\n          } else if (item instanceof HTMLElement) {\n            element.appendChild(item);\n          }\n        });\n      }\n    }\n    return element;\n  },\n  /**\n   * Format a number as a percentage\n   * @param {number} value - Value to format\n   * @param {number} decimals - Number of decimal places\n   * @returns {string} - Formatted percentage\n   */\n  formatPercent: function (value) {\n    let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return value.toFixed(decimals) + '%';\n  },\n  /**\n   * Safely store data in localStorage with error handling\n   * @param {string} key - Storage key\n   * @param {any} value - Value to store\n   * @returns {boolean} - Success status\n   */\n  storeData: function (key, value) {\n    try {\n      const serialized = typeof value === 'object' ? JSON.stringify(value) : String(value);\n      localStorage.setItem(key, serialized);\n      return true;\n    } catch (error) {\n      if (window.AIDetectorDebug && window.AIDetectorDebug.config.enabled) {\n        window.AIDetectorDebug.logger.error(`Error storing data: ${error.message}`);\n      }\n      return false;\n    }\n  },\n  /**\n   * Safely retrieve data from localStorage with error handling\n   * @param {string} key - Storage key\n   * @param {any} defaultValue - Default value if key not found\n   * @returns {any} - Retrieved value or default\n   */\n  retrieveData: function (key) {\n    let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    try {\n      const value = localStorage.getItem(key);\n      if (value === null) return defaultValue;\n\n      // Try to parse as JSON, return as string if not valid JSON\n      try {\n        return JSON.parse(value);\n      } catch {\n        return value;\n      }\n    } catch (error) {\n      if (window.AIDetectorDebug && window.AIDetectorDebug.config.enabled) {\n        window.AIDetectorDebug.logger.error(`Error retrieving data: ${error.message}`);\n      }\n      return defaultValue;\n    }\n  },\n  /**\n   * Debounce function to limit execution rate\n   * @param {Function} func - Function to debounce\n   * @param {number} wait - Wait time in milliseconds\n   * @returns {Function} - Debounced function\n   */\n  debounce: function (func) {\n    let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n    let timeout;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(this, args), wait);\n    };\n  },\n  /**\n   * Copy text to clipboard\n   * @param {string} text - Text to copy\n   * @returns {Promise<boolean>} - Success status\n   */\n  copyToClipboard: async function (text) {\n    try {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } catch (error) {\n      if (window.AIDetectorDebug && window.AIDetectorDebug.config.enabled) {\n        window.AIDetectorDebug.logger.error(`Error copying to clipboard: ${error.message}`);\n      }\n\n      // Fallback method\n      try {\n        const textarea = document.createElement('textarea');\n        textarea.value = text;\n        textarea.style.position = 'fixed';\n        textarea.style.opacity = '0';\n        document.body.appendChild(textarea);\n        textarea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n        return true;\n      } catch {\n        return false;\n      }\n    }\n  },\n  /**\n   * Format a date in a localized way\n   * @param {Date} date - Date to format\n   * @param {string} locale - Locale code\n   * @returns {string} - Formatted date\n   */\n  formatDate: function (date) {\n    let locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n    return new Date(date).toLocaleDateString(locale, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  },\n  /**\n   * Check if the device is mobile\n   * @returns {boolean} - True if mobile device\n   */\n  isMobileDevice: function () {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  },\n  /**\n   * Get the user's preferred language\n   * @returns {string} - Language code\n   */\n  getUserLanguage: function () {\n    // First check localStorage\n    const savedLang = this.retrieveData('aiDetectorLang');\n    if (savedLang) return savedLang;\n\n    // Then check browser language\n    const browserLang = navigator.language || navigator.userLanguage;\n    if (browserLang) {\n      const langCode = browserLang.split('-')[0].toUpperCase();\n\n      // Map browser language codes to our supported languages\n      const langMap = {\n        'EN': 'ENG',\n        'CS': 'CZE',\n        'DE': 'DE',\n        'FR': 'FR',\n        'ES': 'ES',\n        'UK': 'UK',\n        'RU': 'RU'\n      };\n      return langMap[langCode] || 'ENG';\n    }\n\n    // Default to English\n    return 'ENG';\n  },\n  /**\n   * Generate a unique ID\n   * @returns {string} - Unique ID\n   */\n  generateId: function () {\n    return 'id_' + Math.random().toString(36).substr(2, 9);\n  },\n  /**\n   * Safely parse JSON with error handling\n   * @param {string} json - JSON string\n   * @param {any} defaultValue - Default value if parsing fails\n   * @returns {any} - Parsed object or default value\n   */\n  safeJsonParse: function (json) {\n    let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      if (window.AIDetectorDebug && window.AIDetectorDebug.config.enabled) {\n        window.AIDetectorDebug.logger.error(`Error parsing JSON: ${error.message}`);\n      }\n      return defaultValue;\n    }\n  },\n  /**\n   * Check if a feature is supported in the browser\n   * @param {string} feature - Feature to check\n   * @returns {boolean} - True if supported\n   */\n  isFeatureSupported: function (feature) {\n    const features = {\n      'localStorage': typeof localStorage !== 'undefined',\n      'clipboard': navigator && navigator.clipboard,\n      'serviceWorker': 'serviceWorker' in navigator,\n      'webShare': navigator && navigator.share,\n      'darkMode': window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n    };\n    return features[feature] || false;\n  }\n};\n\n// Export the utils object\nif ( true && module.exports) {\n  module.exports = utils;\n} else {\n  // Browser environment\n  window.AIUtils = utils;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///518\n")},694:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _aiDetector = __webpack_require__(72);\nvar _uiController = __webpack_require__(42);\nvar _utils = __webpack_require__(518);\nvar _debug = __webpack_require__(164);\n__webpack_require__(485);\n__webpack_require__(442);\n__webpack_require__(740);\n// main.js - Entry point for AI Text Detector application\n\n// Import required modules\n\n// Import CSS\n\n// Register service worker\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    const swPath = window.location.pathname.includes('ai-text-detector') ? '/ai-text-detector/service-worker.js' : '/service-worker.js';\n    navigator.serviceWorker.register(swPath).then(registration => {\n      console.log('ServiceWorker registration successful');\n\n      // Handle updates\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        newWorker.addEventListener('statechange', () => {\n          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n            // New version available\n            if (confirm('New version available! Reload to update?')) {\n              window.location.reload();\n            }\n          }\n        });\n      });\n    }).catch(error => {\n      console.error('ServiceWorker registration failed:', error);\n      if (window.AIDetectorDebug) {\n        window.AIDetectorDebug.logger.error('ServiceWorker registration failed:', error);\n      }\n    });\n  });\n}\n\n// Initialize IndexedDB\nlet db;\nasync function initDB() {\n  try {\n    db = await new Promise((resolve, reject) => {\n      const request = indexedDB.open('AIDetectorDB', 1);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains('pending')) {\n          db.createObjectStore('pending', {\n            keyPath: 'id'\n          });\n        }\n        if (!db.objectStoreNames.contains('results')) {\n          db.createObjectStore('results', {\n            keyPath: 'id'\n          });\n        }\n      };\n    });\n    console.log('IndexedDB initialized');\n  } catch (error) {\n    console.error('Error initializing IndexedDB:', error);\n  }\n}\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', initApp);\n\n/**\n * Initialize the application\n */\nfunction initializeApp() {\n  // Initialize debug mode if needed\n  if (window.AIDetectorDebug) {\n    window.AIDetectorDebug.init();\n  }\n\n  // Set initial language based on user preference\n  if (window.AIUtils) {\n    const userLang = window.AIUtils.getUserLanguage();\n    if (document.getElementById('langSelect')) {\n      document.getElementById('langSelect').value = userLang;\n    }\n\n    // Initialize UI with user's preferred language\n    if (window.UIController && window.UIController.switchLang) {\n      window.UIController.switchLang(userLang);\n    }\n  }\n\n  // Add event listeners for text input to enable real-time analysis\n  setupRealTimeAnalysis();\n\n  // Check for dark mode preference\n  checkDarkModePreference();\n\n  // Log initialization complete\n  if (window.AIDetectorDebug && window.AIDetectorDebug.logger) {\n    window.AIDetectorDebug.logger.info('AI Text Detector initialized successfully');\n  }\n}\n\n/**\n * Load a stylesheet dynamically\n * @param {string} path - Path to the stylesheet\n */\nfunction loadStylesheet(path) {\n  const link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.type = 'text/css';\n  link.href = path;\n  document.head.appendChild(link);\n}\n\n/**\n * Set up real-time analysis for text input\n */\nfunction setupRealTimeAnalysis() {\n  const inputText = document.getElementById('inputText');\n  if (!inputText) return;\n  const debouncedAnalysis = _utils.Utils.debounce(async () => {\n    if (inputText.value.trim().length > 50) {\n      try {\n        const result = await analyzeText(inputText.value);\n        const ui = new _uiController.UIController();\n        ui.displayResults(result);\n      } catch (error) {\n        console.error('Error in real-time analysis:', error);\n      }\n    }\n  }, 1000);\n  inputText.addEventListener('input', debouncedAnalysis);\n}\n\n/**\n * Check user's dark mode preference\n */\nfunction checkDarkModePreference() {\n  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n    if (!localStorage.getItem('theme')) {\n      document.documentElement.setAttribute('data-theme', 'dark');\n      localStorage.setItem('theme', 'dark');\n      updateThemeIcon('dark');\n    }\n  }\n}\n\n// Initialize theme\nfunction initTheme() {\n  const theme = localStorage.getItem('theme') || 'dark';\n  document.documentElement.setAttribute('data-theme', theme);\n  updateThemeIcon(theme);\n}\n\n// Update theme icon\nfunction updateThemeIcon(theme) {\n  const themeIcon = document.querySelector('#themeToggle i');\n  if (themeIcon) {\n    themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';\n  }\n}\n\n// Toggle theme\nfunction toggleTheme() {\n  const currentTheme = document.documentElement.getAttribute('data-theme');\n  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n  document.documentElement.setAttribute('data-theme', newTheme);\n  localStorage.setItem('theme', newTheme);\n  updateThemeIcon(newTheme);\n}\n\n// Initialize application with offline support\nasync function initApp() {\n  try {\n    // Initialize debug mode first for better error tracking\n    if (window.AIDetectorDebug) {\n      window.AIDetectorDebug.init();\n    }\n\n    // Initialize IndexedDB\n    await initDB();\n\n    // Initialize theme\n    initTheme();\n\n    // Add theme toggle listener\n    const themeToggle = document.getElementById('themeToggle');\n    if (themeToggle) {\n      themeToggle.addEventListener('click', toggleTheme);\n    }\n\n    // Initialize UI components with error handling\n    try {\n      const ui = new _uiController.UIController();\n      const detector = new _aiDetector.AIDetector();\n\n      // Set initial language based on user preference\n      const userLang = _utils.Utils.getUserLanguage();\n      const langSelect = document.getElementById('langSelect');\n      if (langSelect) {\n        langSelect.value = userLang;\n      }\n\n      // Initialize UI with user's preferred language\n      ui.switchLang(userLang);\n\n      // Add event listeners for text input\n      setupRealTimeAnalysis();\n\n      // Check for dark mode preference\n      checkDarkModePreference();\n\n      // Add analyze button listener\n      const analyzeBtn = document.getElementById('analyzeBtn');\n      if (analyzeBtn) {\n        analyzeBtn.addEventListener('click', async () => {\n          const text = document.getElementById('inputText')?.value;\n          if (!text) {\n            ui.showError('Please enter text to analyze.');\n            return;\n          }\n          try {\n            const result = await analyzeText(text);\n            ui.displayResults(result);\n          } catch (error) {\n            console.error('Error analyzing text:', error);\n            ui.showError('Error analyzing text. Please try again.');\n            if (window.AIDetectorDebug) {\n              window.AIDetectorDebug.logger.error('Text analysis error:', error);\n            }\n          }\n        });\n      }\n\n      // Add compare button listener\n      const compareBtn = document.getElementById('compareBtn');\n      if (compareBtn) {\n        compareBtn.addEventListener('click', () => {\n          const text1 = document.getElementById('inputText')?.value;\n          const text2 = document.getElementById('compareText')?.value;\n          if (!text1 || !text2) {\n            ui.showError('Please enter both texts to compare.');\n            return;\n          }\n          try {\n            const result = detector.compareTexts(text1, text2);\n            ui.displayCompareResults(result);\n          } catch (error) {\n            console.error('Error comparing texts:', error);\n            ui.showError('Error comparing texts. Please try again.');\n            if (window.AIDetectorDebug) {\n              window.AIDetectorDebug.logger.error('Text comparison error:', error);\n            }\n          }\n        });\n      }\n      console.log('AI Text Detector initialized successfully');\n      if (window.AIDetectorDebug) {\n        window.AIDetectorDebug.logger.info('AI Text Detector initialized successfully');\n      }\n\n      // Hide loading spinner and show content\n      const loadingSpinner = document.querySelector('.loading-spinner');\n      const appContent = document.querySelector('.app-content');\n      if (loadingSpinner && appContent) {\n        loadingSpinner.style.display = 'none';\n        appContent.classList.add('loaded');\n      }\n    } catch (error) {\n      console.error('Error initializing UI components:', error);\n      if (window.AIDetectorDebug) {\n        window.AIDetectorDebug.logger.error('UI initialization error:', error);\n      }\n      throw error;\n    }\n  } catch (error) {\n    console.error('Error initializing application:', error);\n    if (window.AIDetectorDebug) {\n      window.AIDetectorDebug.logger.error('Application initialization error:', error);\n    }\n    document.body.innerHTML = '<h1>Error loading application. Please try refreshing the page.</h1>';\n  }\n}\n\n// Helper function to analyze text\nasync function analyzeText(text) {\n  if (!navigator.onLine) {\n    throw new Error('Offline');\n  }\n  const detector = new _aiDetector.AIDetector();\n  return detector.analyzeTextDetailed(text);\n}\n\n// Store analysis request for offline processing\nasync function storeOfflineAnalysis(text) {\n  const analysis = {\n    id: Date.now(),\n    text,\n    timestamp: Date.now()\n  };\n  const transaction = db.transaction(['pending'], 'readwrite');\n  const store = transaction.objectStore('pending');\n  await store.add(analysis);\n\n  // Request background sync\n  if ('serviceWorker' in navigator && 'SyncManager' in window) {\n    const registration = await navigator.serviceWorker.ready;\n    await registration.sync.register('analyze-text');\n  }\n}\n\n// Performance monitoring\nconst performanceMetrics = {\n  firstPaint: 0,\n  firstContentfulPaint: 0,\n  domInteractive: 0,\n  loadComplete: 0\n};\n\n// Measure performance metrics\nfunction measurePerformance() {\n  const observer = new PerformanceObserver(list => {\n    for (const entry of list.getEntries()) {\n      if (entry.name === 'first-paint') {\n        performanceMetrics.firstPaint = entry.startTime;\n      }\n      if (entry.name === 'first-contentful-paint') {\n        performanceMetrics.firstContentfulPaint = entry.startTime;\n      }\n    }\n  });\n  observer.observe({\n    entryTypes: ['paint']\n  });\n  window.addEventListener('DOMContentLoaded', () => {\n    performanceMetrics.domInteractive = performance.now();\n  });\n  window.addEventListener('load', () => {\n    performanceMetrics.loadComplete = performance.now();\n    logPerformanceMetrics();\n  });\n}\n\n// Log performance metrics\nfunction logPerformanceMetrics() {\n  console.log('Performance Metrics:', {\n    'First Paint': Math.round(performanceMetrics.firstPaint) + 'ms',\n    'First Contentful Paint': Math.round(performanceMetrics.firstContentfulPaint) + 'ms',\n    'DOM Interactive': Math.round(performanceMetrics.domInteractive) + 'ms',\n    'Load Complete': Math.round(performanceMetrics.loadComplete) + 'ms'\n  });\n}\n\n// Initialize performance monitoring\nmeasurePerformance();\n\n// Optimize resource loading\nfunction optimizeResourceLoading() {\n  const basePath = window.location.pathname.includes('ai-text-detector') ? '/ai-text-detector' : '';\n\n  // Preload critical resources\n  const preloadLinks = [{\n    rel: 'preload',\n    as: 'style',\n    href: `${basePath}/main.css`\n  }, {\n    rel: 'preload',\n    as: 'script',\n    href: `${basePath}/ai-detector.js`\n  }, {\n    rel: 'preload',\n    as: 'font',\n    href: `${basePath}/fonts/main-font.woff2`,\n    crossorigin: 'anonymous'\n  }];\n  preloadLinks.forEach(link => {\n    const linkEl = document.createElement('link');\n    Object.assign(linkEl, link);\n    document.head.appendChild(linkEl);\n  });\n\n  // Lazy load non-critical resources\n  const lazyResources = [{\n    type: 'script',\n    src: `${basePath}/analytics.js`\n  }, {\n    type: 'script',\n    src: `${basePath}/feedback.js`\n  }, {\n    type: 'style',\n    href: `${basePath}/print.css`,\n    media: 'print'\n  }];\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        loadResource(entry.target.dataset.resource);\n        observer.unobserve(entry.target);\n      }\n    });\n  });\n  lazyResources.forEach(resource => {\n    const placeholder = document.createElement('div');\n    placeholder.dataset.resource = JSON.stringify(resource);\n    document.body.appendChild(placeholder);\n    observer.observe(placeholder);\n  });\n}\n\n// Load a resource dynamically\nfunction loadResource(resourceJson) {\n  const resource = JSON.parse(resourceJson);\n  const element = document.createElement(resource.type === 'script' ? 'script' : 'link');\n  if (resource.type === 'script') {\n    element.src = resource.src;\n    element.async = true;\n  } else {\n    element.rel = 'stylesheet';\n    element.href = resource.href;\n    if (resource.media) element.media = resource.media;\n  }\n  document.head.appendChild(element);\n}\n\n// Initialize optimizations\noptimizeResourceLoading();\n\n// Create and export the AITextDetector object\nconst AITextDetector = {\n  initApp,\n  initTheme,\n  toggleTheme,\n  analyzeText,\n  Utils: _utils.Utils,\n  AIDetector: _aiDetector.AIDetector,\n  UIController: _uiController.UIController\n};\n\n// Expose to window object\nif (typeof window !== 'undefined') {\n  window.AITextDetector = AITextDetector;\n  window.initApp = initApp;\n}\nvar _default = exports[\"default\"] = AITextDetector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///694\n")},740:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQwLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0FJVGV4dERldGVjdG9yLy4vcmVzcG9uc2l2ZS5jc3M/OTAxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///740\n")}},Q=>(Q.O(0,[42,72],(()=>{return U=694,Q(Q.s=U);var U})),Q.O())])));